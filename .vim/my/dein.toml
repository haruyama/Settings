[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['Shougo/neomru.vim', 'Shougo/neoyank.vim']
if   = ''' v:version >= 800 && has('python3')'''
hook_source = '''
source ~/.vim/my/plugins/denite.vim
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['Shougo/neomru.vim', 'Shougo/neoyank.vim']
if   = '''! (v:version >= 800 && has('python3'))'''
hook_source = '''
source ~/.vim/my/plugins/unite.vim
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'dsolstad/vim-wombat256i'
hook_add = '''
set background=dark
augroup colorscheme
  autocmd! VimEnter * colorscheme wombat256i
augroup END
'''

[[plugins]]
repo = 'Shougo/unite.vim'
hook_source = '''
source ~/.vim/my/plugins/unite.vim
'''

[[plugins]]
repo = 'AutoTag'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
source ~/.vim/my/plugins/neosnippet.vim
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'raymond-w-ko/vim-niji'
hook_add = '''
let g:niji_matching_filetypes = ['lisp', 'scheme']
'''

[[plugins]]
repo = 'h1mesuke/unite-outline'

[[plugins]]
repo = 'haruyama/EnhCommentify.vim'

[[plugins]]
repo = 'haruyama/vim-matchopen'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xnoremap <silent> <Leader>a :EasyAlign<cr>
'''

[[plugins]]
repo = 'kana/vim-smartinput'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'osyo-manga/unite-quickfix'

[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" http://stackoverflow.com/questions/18270355/how-to-ignore-angular-directive-lint-error-with-vim-and-syntastic
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
\    "octave" : {
\       "command" : "octave",
\       "cmdopt"  : "--silent",
\   },
\    "ceylon" : {
\       "command" : "ceylon",
\       "cmdopt"  : "compile",
\   },
\}
'''

[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
let g:template_vim_template_dir  = $HOME . '/.vim/template'
let g:template_vim_template_dirs = [$HOME . '/.vim/template']
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
let g:yankring_history_dir            = $HOME . '/.vim/history'
let g:yankring_manual_clipboard_check = 1

nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
let g:yankround_max_history = 50
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
'''

[[plugins]]
repo = 'mh21/errormarker.vim'

[[plugins]]
repo = 'guns/vim-sexp'

[[plugins]]
repo = 'tpope/vim-sexp-mappings-for-regular-people'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'rhysd/committia.vim'

[[plugins]]
repo = 'rhysd/vim-grammarous'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
source ~/.vim/my/plugins/tagbar.vim
'''

[[plugins]]
repo = 'janko-m/vim-test'
hook_add = '''
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>f :TestFile<CR>
nmap <silent> <leader>s :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

let test#python#pytest#options = {
  \ 'nearest': '-v',
  \ 'file':    '-v',
  \ 'suite':   '-v',
\}
let test#go#gotest#options = {
  \ 'nearest': '-v',
  \ 'file':    '-v',
  \ 'suite':   '-v',
\}
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multitextobj'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'

[[plugins]]
repo = 'dietsche/vim-lastplace'

[[plugins]]
repo = 'simeji/winresizer'
