[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'nvim-lspconfig']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ pumvisible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'
inoremap <silent><expr> <C-l> ddc#complete_common_string()

call ddc#custom#patch_global(
      \ 'sources', ['around', 'nvim-lsp', 'vsnip', 'dictionary']
      \ )
call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank'],
      \   'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {
      \   'mark': 'A',
      \   'matchers': ['matcher_head', 'matcher_length'],
      \ },
      \ 'nvim-lsp': {
      \   'mark': 'lsp', 
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \    'dup': 'force',
      \  },
      \ 'vsnip': {
      \   'mark': 'snip', 
      \   },
      \ 'skkeleton': {
      \   'mark': 'skkeleton',
      \   'matchers': ['skkeleton'],
      \   'sorters': [],
      \   'minAutoCompleteLength': 2,
      \   },
      \ })
      " \   'forceCompletionPattern': '\.|:|->'},
call ddc#custom#patch_global('sourceParams', {
      \ 'nvim-lsp': {'maxSize': 500},
      \ })
call ddc#custom#patch_filetype(
      \ ['vim', 'toml'], 'sources', ['around']
      \ )

call ddc#enable(#{
      \   context_filetype: has('nvim') ? 'treesitter' : 'context_filetype',
      \ })
'''

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_source = '''
let g:vista_default_executive = 'nvim_lsp'
'''

# [[plugins]]
# repo = 'matsui54/ddc-nvim-lsp-doc'
# on_source = 'ddc-nvim-lsp'
# hook_source = '''
# call ddc_nvim_lsp_doc#enable()
# '''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'vim-vsnip-integ'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'
hook_source = '''
imap <expr> <C-k>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-k>'
smap <expr> <C-k>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-k>'

" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
nmap        s   <Plug>(vsnip-select-text)
xmap        s   <Plug>(vsnip-select-text)
nmap        S   <Plug>(vsnip-cut-text)
xmap        S   <Plug>(vsnip-cut-text)
'''

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = 'vim-vsnip'
hook_source = '''
let g:vsnip_snippet_dirs = get(g:, 'vsnip_snippet_dirs', []) + globpath(&runtimepath, 'friendly-snippets', 1, 1)
'''
