[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

# [[plugins]]
# repo = 'Shougo/defx.nvim'
# hook_source = '''
# source ~/.vim/my/plugins/defx.vim
# '''
# on_cmd = ['Defx']

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xnoremap <silent> <Leader>a :EasyAlign<cr>
'''
on_cmd = ['EasyAlign']

[[plugins]]
repo = 'rhysd/vim-grammarous'
on_cmd = [ 'GrammarousCheck' ]

[[plugins]]
repo = 'raghur/vim-ghost'
on_cmd = ['GhostInstall', 'GhostStart']
hook_post_update = '''
:GhostInstall
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = 'impatient.nvim'
on_event = 'BufRead'
if = 'has("nvim")'
hook_source = '''
lua << EOF
local opts = { noremap=true, silent=true }

vim.api.nvim_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
vim.api.nvim_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
vim.api.nvim_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
vim.api.nvim_set_keymap('n', '[g', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']g', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
vim.api.nvim_set_keymap('n', '<F2>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.documentationFormat = { 'markdown', 'plaintext' }
-- capabilities.textDocument.completion.completionItem.snippetSupport = true
capabilities.textDocument.completion.completionItem.preselectSupport = true
capabilities.textDocument.completion.completionItem.insertReplaceSupport = true
capabilities.textDocument.completion.completionItem.labelDetailsSupport = true
capabilities.textDocument.completion.completionItem.deprecatedSupport = true
capabilities.textDocument.completion.completionItem.commitCharactersSupport = true
capabilities.textDocument.completion.completionItem.tagSupport = { valueSet = { 1 } }
capabilities.textDocument.completion.completionItem.resolveSupport = {
  properties = {
    'documentation',
    'detail',
    'additionalTextEdits',
  },
}

vim.o.completeopt = 'menuone,noselect'

-- vim.lsp.set_log_level("debug")

local lspconfig = require'lspconfig'
lspconfig.clangd.setup{capabilities = capabilities}
lspconfig.cmake.setup{capabilities = capabilities}
-- lspconfig.denols.setup{capabilities = capabilities}
lspconfig.gopls.setup{
    capabilities = capabilities,
    settings = {
        gopls = {
            experimentalPostfixCompletions = true,
            analyses = {
                unusedparams = false,
                shadow = false,
            },
            staticcheck = true,
            hints = {
                assignVariableTypes = true,
                compositeLiteralFields = true,
                compositeLiteralTypes = true,
                constantValues = true,
                functionTypeParameters = true,
                parameterNames = true,
                rangeVariableTypes = true,
            },
        },
    },
}
lspconfig.pyright.setup{capabilities = capabilities}
-- lspconfig.rls.setup{capabilities = capabilities}
lspconfig.rust_analyzer.setup{capabilities = capabilities}
lspconfig.solargraph.setup{capabilities = capabilities}
-- lspconfig.sorbet.setup{on_attach = on_attach, capabilities = capabilities}
lspconfig.tsserver.setup{capabilities = capabilities}
lspconfig.vuels.setup{capabilities = capabilities}
lspconfig.zls.setup{capabilities = capabilities}
EOF
'''

[[plugins]]
repo = 'simrat39/rust-tools.nvim'
if = "has('nvim')"
hook_source = '''
lua << EOF
local opts = {
  tools = { -- rust-tools options

    -- how to execute terminal commands
    -- options right now: termopen / quickfix
    executor = require("rust-tools.executors").termopen,

    -- callback to execute once rust-analyzer is done initializing the workspace
    -- The callback receives one parameter indicating the `health` of the server: "ok" | "warning" | "error"
    on_initialized = nil,

    -- automatically call RustReloadWorkspace when writing to a Cargo.toml file.
    reload_workspace_from_cargo_toml = true,

    -- These apply to the default RustSetInlayHints command
    inlay_hints = {
      -- automatically set inlay hints (type hints)
      -- default: true
      auto = true,

      -- Only show inlay hints for the current line
      only_current_line = false,

      -- whether to show parameter hints with the inlay hints or not
      -- default: true
      show_parameter_hints = true,

      -- prefix for parameter hints
      -- default: "<-"
      parameter_hints_prefix = "<- ",

      -- prefix for all the other hints (type, chaining)
      -- default: "=>"
      other_hints_prefix = "=> ",

      -- whether to align to the length of the longest line in the file
      max_len_align = false,

      -- padding from the left if max_len_align is true
      max_len_align_padding = 1,

      -- whether to align to the extreme right or not
      right_align = false,

      -- padding from the right if right_align is true
      right_align_padding = 7,

      -- The color of the hints
      highlight = "Comment",
    },

    -- options same as lsp hover / vim.lsp.util.open_floating_preview()
    hover_actions = {

      -- the border that is used for the hover window
      -- see vim.api.nvim_open_win()
      border = {
        { "╭", "FloatBorder" },
        { "─", "FloatBorder" },
        { "╮", "FloatBorder" },
        { "│", "FloatBorder" },
        { "╯", "FloatBorder" },
        { "─", "FloatBorder" },
        { "╰", "FloatBorder" },
        { "│", "FloatBorder" },
      },

      -- Maximal width of the hover window. Nil means no max.
      max_width = nil,

      -- Maximal height of the hover window. Nil means no max.
      max_height = nil,

      -- whether the hover action window gets automatically focused
      -- default: false
      auto_focus = false,
    },

    -- settings for showing the crate graph based on graphviz and the dot
    -- command
    crate_graph = {
      -- Backend used for displaying the graph
      -- see: https://graphviz.org/docs/outputs/
      -- default: x11
      backend = "x11",
      -- where to store the output, nil for no output stored (relative
      -- path from pwd)
      -- default: nil
      output = nil,
      -- true for all crates.io and external crates, false only the local
      -- crates
      -- default: true
      full = true,

      -- List of backends found on: https://graphviz.org/docs/outputs/
      -- Is used for input validation and autocompletion
      -- Last updated: 2021-08-26
      enabled_graphviz_backends = {
        "bmp",
        "cgimage",
        "canon",
        "dot",
        "gv",
        "xdot",
        "xdot1.2",
        "xdot1.4",
        "eps",
        "exr",
        "fig",
        "gd",
        "gd2",
        "gif",
        "gtk",
        "ico",
        "cmap",
        "ismap",
        "imap",
        "cmapx",
        "imap_np",
        "cmapx_np",
        "jpg",
        "jpeg",
        "jpe",
        "jp2",
        "json",
        "json0",
        "dot_json",
        "xdot_json",
        "pdf",
        "pic",
        "pct",
        "pict",
        "plain",
        "plain-ext",
        "png",
        "pov",
        "ps",
        "ps2",
        "psd",
        "sgi",
        "svg",
        "svgz",
        "tga",
        "tiff",
        "tif",
        "tk",
        "vml",
        "vmlz",
        "wbmp",
        "webp",
        "xlib",
        "x11",
      },
    },
  },

  -- all the opts to send to nvim-lspconfig
  -- these override the defaults set by rust-tools.nvim
  -- see https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer
  server = {
    -- standalone file support
    -- setting it to false may improve startup time
    standalone = true,
  }, -- rust-analyzer options

  -- debugging stuff
  dap = {
    adapter = {
      type = "executable",
      command = "lldb-vscode",
      name = "rt_lldb",
    },
  },
}

require('rust-tools').setup(opts)
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = "has('nvim')"
on_event = 'BufRead'
depends = 'impatient.nvim'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = 'all',
  highlight = {
    enable = true,
    disable = {},
  },
  -- incremental_selection = {
  --   enable = true,
  --   keymaps = {
  --     init_selection = "gnn",
  --     node_incremental = "grn",
  --     scope_incremental = "grc",
  --     node_decremental = "grm",
  --   },
  -- },
}
EOF

" " Custom colors
" highlight CandyBlue         gui=NONE guibg=#2c2c2c guifg=#1e95fd
" highlight CandyCranberry    gui=NONE guibg=#2c2c2c guifg=#4ae2e2
" highlight CandyEmerald      gui=NONE guibg=#2c2c2c guifg=#44ff44
" highlight CandyGreen        gui=NONE guibg=#2c2c2c guifg=#66ff66
" highlight CandyLime         gui=NONE guibg=#2c2c2c guifg=#4ae2e2
" highlight CandyOrange       gui=NONE guibg=#2c2c2c guifg=#ffb30a
" highlight CandyRed          gui=NONE guibg=#2c2c2c guifg=#ff6666
" highlight CandySky          gui=NONE guibg=#2c2c2c guifg=#6699ff
" highlight CandyViolet       gui=NONE guibg=#2c2c2c guifg=#ff13ff
" highlight CandyWhite        gui=NONE guibg=#2c2c2c guifg=#cccccc
" highlight CandyYellow       gui=NONE guibg=#2c2c2c guifg=#ffd30a
" highlight CandyCoral        gui=NONE guibg=#2c2c2c guifg=#f820ff
" highlight CandyTurquoise    gui=NONE guibg=#2c2c2c guifg=#1bc8c8
" highlight CandyCrimson      gui=NONE guibg=#2c2c2c guifg=#ff4444
"
" " neovim treesitter colors
" highlight! link TSAnnotation      CandyViolet
" highlight! link TSAttribute       CandySky
" highlight! link TSBoolean         Boolean
" highlight! link TSCharacter       Character
" highlight! link TSConditional     CandyCoral
" highlight! link TSConstBuiltin    CandyGreen
" highlight! link TSConstMacro      CandyViolet
" highlight! link TSConstant        Constant
" highlight! link TSConstructor     CandyEmerald
" highlight! link TSError           Error
" highlight! link TSException       Exception
" highlight! link TSField           CandyBlue
" highlight! link TSFloat           Float
" highlight! link TSFuncBuiltin     CandySky
" highlight! link TSFuncMacro       CandySky
" highlight! link TSFunction        CandyCranberry
" highlight! link TSInclude         CandyCranberry
" highlight! link TSKeyword         CandyEmerald
" highlight! link TSKeywordFunction Keyword
" highlight! link TSKeywordOperator CandyViolet
" highlight! link TSLabel           Label
" highlight! link TSLiteral         CandyYellow
" highlight! link TSMethod          CandyTurquoise
" highlight! link TSNamespace       CandyBlue
" highlight! link TSNone            Normal
" highlight! link TSNumber          Number
" highlight! link TSOperator        Operator
" highlight! link TSParameter       CandyWhite
" highlight! link TSParameterReference CandyWhite
" highlight! link TSProperty        Identifier
" highlight! link TSPunctBracket    CandyOrange
" highlight! link TSPunctDelimiter  CandyLime
" highlight! link TSPunctSpecial    Special
" highlight! link TSRepeat          Repeat
" highlight! link TSString          String
" highlight! link TSStringEscape    SpecialChar
" highlight! link TSStringRegex     String
" highlight! link TSTag             CandyBlue
" highlight! link TSTagDelimiter    CandyLime
" highlight! link TSText            TSNone
" highlight! link TSTitle           Title
" highlight! link TSType            Type
" highlight! link TSTypeBuiltin     Type
" highlight! link TSURL             Underlined
" highlight! link TSUnderline       Underlined
" highlight! link TSVariableBuiltin CandyLime
'''

# [[plugins]]
# repo = 'gelguy/wilder.nvim'
# on_map = ':'
# hook_source = '''
# silent! call wilder#enable_cmdline_enter()
# set wildcharm=<Tab>
#
# "      \ 'modes': [':', '/', '?'],
# call wilder#setup({
#       \ 'modes': [':'],
#       \ 'next_key': '<C-n>',
#       \ 'previous_key': '<C-p>',
#       \ 'accept_key': '<Down>',
#       \ 'reject_key': '<Up>',
#       \ })
#
# call wilder#set_option('renderer', wilder#popupmenu_renderer({
#       \ 'highlighter': wilder#basic_highlighter(),
#       \ }))
# '''

# [[plugins]]
# repo = 'Shougo/denite.nvim'
# depends = ['neomru.vim', 'neoyank.vim']
# on_cmd = 'Denite'
# hook_source = '''
# source ~/.vim/my/plugins/denite.vim
# '''
# hook_add = '''
# " nnoremap <silent> ,ua :<C-u>DeniteBufferDir -default-action=tabswitch file/rec<CR>
#
# nnoremap <silent> ,uc :<C-u>Denite colorscheme<CR>
# nnoremap <silent> ,ud :<C-u>Denite -default-action=tabswitch directory_rec<CR>
# nnoremap <silent> ,uf :<C-u>Denite filetype<CR>
# nnoremap <silent> ,ug :<C-u>Denite grep<CR>
# nnoremap <silent> ,ul :<C-u>Denite line<CR>
#
# nnoremap <silent> ,um :<C-u>Denite file_mru<CR>
#
# nnoremap <silent> ,uu :<C-u>Denite -default-action=tabswitch buffer file_mru<CR>
# nnoremap <silent> ,uy :<C-u>Denite neoyank<CR>
#
# nnoremap <silent> ,ur :<C-u>Denite -resume=true<CR>
# nnoremap <silent> ,up :<C-u>Denite -resume=true -select=-1 -immediately=true<CR>
# nnoremap <silent> ,un :<C-u>Denite -resume=true -select=+1 -immediately=true<CR>
#
# '''
#
# [[plugins]]
# repo = 'Shougo/neomru.vim'
# on_source = 'denite.nvim'
#
# [[plugins]]
# repo = 'Shougo/neoyank.vim'
# on_source = 'denite.nvim'

[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = {ic = '<Plug>(skkeleton-toggle)'}
depends = ['ddc.vim']
hook_add = '''
  imap <C-j> <Plug>(skkeleton-toggle)
  cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
augroup my_skkeleton
  autocmd!
  autocmd User skkeleton-initialize-pre call s:skkeleton_init()
augroup END
 "let g:skkeleton#debug = v:true
function! s:skkeleton_init() abort
  call skkeleton#config({
        \ 'globalJisyo': expand('~/.local/share/skk/SKK-JISYO.my'),
        \ 'globalJisyoEncoding': 'utf-8',
        \ 'eggLikeNewline': v:true,
        \ 'registerConvertResult': v:true,
        \ 'markerHenkan': '<>',
        \ 'markerHenkanSelect': '>>',
        \ })

  call skkeleton#register_kanatable('rom', {
        \ 'jj': 'escape',
        \ '~': ['〜', ''],
        \ "z\<Space>": ["\u3000", ''],
        \ })
endfunction
'''
