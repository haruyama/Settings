[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_source = '''
source ~/.vim/my/plugins/defx.vim
'''
on_cmd = ['Defx']

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xnoremap <silent> <Leader>a :EasyAlign<cr>
'''
on_cmd = ['EasyAlign']

[[plugins]]
repo = 'rhysd/vim-grammarous'
on_cmd = [ 'GrammarousCheck' ]

[[plugins]]
repo = 'raghur/vim-ghost'
on_cmd = ['GhostInstall', 'GhostStart']
hook_post_update = '''
:GhostInstall
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = 'impatient.nvim'
on_event = 'BufRead'
if = 'has("nvim")'
hook_source = '''
lua << EOF
local opts = { noremap=true, silent=true }

vim.api.nvim_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
vim.api.nvim_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
vim.api.nvim_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
vim.api.nvim_set_keymap('n', '[g', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']g', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
vim.api.nvim_set_keymap('n', '<F2>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.documentationFormat = { 'markdown', 'plaintext' }
capabilities.textDocument.completion.completionItem.snippetSupport = true
capabilities.textDocument.completion.completionItem.preselectSupport = true
capabilities.textDocument.completion.completionItem.insertReplaceSupport = true
capabilities.textDocument.completion.completionItem.labelDetailsSupport = true
capabilities.textDocument.completion.completionItem.deprecatedSupport = true
capabilities.textDocument.completion.completionItem.commitCharactersSupport = true
capabilities.textDocument.completion.completionItem.tagSupport = { valueSet = { 1 } }
capabilities.textDocument.completion.completionItem.resolveSupport = {
  properties = {
    'documentation',
    'detail',
    'additionalTextEdits',
  },
}

vim.o.completeopt = 'menuone,noselect'

-- vim.lsp.set_log_level("debug")

local lspconfig = require'lspconfig'
lspconfig.clangd.setup{capabilities = capabilities}
lspconfig.cmake.setup{capabilities = capabilities}
-- lspconfig.denols.setup{capabilities = capabilities}
lspconfig.gopls.setup{capabilities = capabilities}
lspconfig.pyright.setup{capabilities = capabilities}
lspconfig.rls.setup{capabilities = capabilities}
lspconfig.solargraph.setup{capabilities = capabilities}
-- lspconfig.sorbet.setup{on_attach = on_attach, capabilities = capabilities}
lspconfig.tsserver.setup{capabilities = capabilities}
lspconfig.vuels.setup{capabilities = capabilities}
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = "has('nvim')"
on_event = 'BufRead'
depends = 'impatient.nvim'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = 'all',
  highlight = {
    enable = true,
    disable = {},
  },
  -- incremental_selection = {
  --   enable = true,
  --   keymaps = {
  --     init_selection = "gnn",
  --     node_incremental = "grn",
  --     scope_incremental = "grc",
  --     node_decremental = "grm",
  --   },
  -- },
}
EOF

" " Custom colors
" highlight CandyBlue         gui=NONE guibg=#2c2c2c guifg=#1e95fd
" highlight CandyCranberry    gui=NONE guibg=#2c2c2c guifg=#4ae2e2
" highlight CandyEmerald      gui=NONE guibg=#2c2c2c guifg=#44ff44
" highlight CandyGreen        gui=NONE guibg=#2c2c2c guifg=#66ff66
" highlight CandyLime         gui=NONE guibg=#2c2c2c guifg=#4ae2e2
" highlight CandyOrange       gui=NONE guibg=#2c2c2c guifg=#ffb30a
" highlight CandyRed          gui=NONE guibg=#2c2c2c guifg=#ff6666
" highlight CandySky          gui=NONE guibg=#2c2c2c guifg=#6699ff
" highlight CandyViolet       gui=NONE guibg=#2c2c2c guifg=#ff13ff
" highlight CandyWhite        gui=NONE guibg=#2c2c2c guifg=#cccccc
" highlight CandyYellow       gui=NONE guibg=#2c2c2c guifg=#ffd30a
" highlight CandyCoral        gui=NONE guibg=#2c2c2c guifg=#f820ff
" highlight CandyTurquoise    gui=NONE guibg=#2c2c2c guifg=#1bc8c8
" highlight CandyCrimson      gui=NONE guibg=#2c2c2c guifg=#ff4444
"
" " neovim treesitter colors
" highlight! link TSAnnotation      CandyViolet
" highlight! link TSAttribute       CandySky
" highlight! link TSBoolean         Boolean
" highlight! link TSCharacter       Character
" highlight! link TSConditional     CandyCoral
" highlight! link TSConstBuiltin    CandyGreen
" highlight! link TSConstMacro      CandyViolet
" highlight! link TSConstant        Constant
" highlight! link TSConstructor     CandyEmerald
" highlight! link TSError           Error
" highlight! link TSException       Exception
" highlight! link TSField           CandyBlue
" highlight! link TSFloat           Float
" highlight! link TSFuncBuiltin     CandySky
" highlight! link TSFuncMacro       CandySky
" highlight! link TSFunction        CandyCranberry
" highlight! link TSInclude         CandyCranberry
" highlight! link TSKeyword         CandyEmerald
" highlight! link TSKeywordFunction Keyword
" highlight! link TSKeywordOperator CandyViolet
" highlight! link TSLabel           Label
" highlight! link TSLiteral         CandyYellow
" highlight! link TSMethod          CandyTurquoise
" highlight! link TSNamespace       CandyBlue
" highlight! link TSNone            Normal
" highlight! link TSNumber          Number
" highlight! link TSOperator        Operator
" highlight! link TSParameter       CandyWhite
" highlight! link TSParameterReference CandyWhite
" highlight! link TSProperty        Identifier
" highlight! link TSPunctBracket    CandyOrange
" highlight! link TSPunctDelimiter  CandyLime
" highlight! link TSPunctSpecial    Special
" highlight! link TSRepeat          Repeat
" highlight! link TSString          String
" highlight! link TSStringEscape    SpecialChar
" highlight! link TSStringRegex     String
" highlight! link TSTag             CandyBlue
" highlight! link TSTagDelimiter    CandyLime
" highlight! link TSText            TSNone
" highlight! link TSTitle           Title
" highlight! link TSType            Type
" highlight! link TSTypeBuiltin     Type
" highlight! link TSURL             Underlined
" highlight! link TSUnderline       Underlined
" highlight! link TSVariableBuiltin CandyLime
'''

# [[plugins]]
# repo = 'gelguy/wilder.nvim'
# on_map = ':'
# hook_source = '''
# silent! call wilder#enable_cmdline_enter()
# set wildcharm=<Tab>
#
# "      \ 'modes': [':', '/', '?'],
# call wilder#setup({
#       \ 'modes': [':'],
#       \ 'next_key': '<C-n>',
#       \ 'previous_key': '<C-p>',
#       \ 'accept_key': '<Down>',
#       \ 'reject_key': '<Up>',
#       \ })
#
# call wilder#set_option('renderer', wilder#popupmenu_renderer({
#       \ 'highlighter': wilder#basic_highlighter(),
#       \ }))
# '''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'neoyank.vim']
on_cmd = 'Denite'
hook_source = '''
source ~/.vim/my/plugins/denite.vim
'''
hook_add = '''
nnoremap <silent> ,ua :<C-u>DeniteBufferDir -default-action=tabswitch file/rec<CR>

nnoremap <silent> ,uc :<C-u>Denite colorscheme<CR>
nnoremap <silent> ,ud :<C-u>Denite -default-action=tabswitch directory_rec<CR>
nnoremap <silent> ,uf :<C-u>Denite filetype<CR>
nnoremap <silent> ,ug :<C-u>Denite grep<CR>
nnoremap <silent> ,ul :<C-u>Denite line<CR>

nnoremap <silent> ,um :<C-u>Denite file_mru<CR>

nnoremap <silent> ,uu :<C-u>Denite -default-action=tabswitch buffer file_mru<CR>
nnoremap <silent> ,uy :<C-u>Denite neoyank<CR>

nnoremap <silent> ,ur :<C-u>Denite -resume=true<CR>
nnoremap <silent> ,up :<C-u>Denite -resume=true -select=-1 -immediately=true<CR>
nnoremap <silent> ,un :<C-u>Denite -resume=true -select=+1 -immediately=true<CR>

'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = {ic = '<Plug>(skkeleton-toggle)'}
depends = ['ddc.vim']
hook_add = '''
  imap <C-j> <Plug>(skkeleton-toggle)
  cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
augroup my_skkeleton
  autocmd!
  autocmd User skkeleton-initialize-pre call s:skkeleton_init()
augroup END
 "let g:skkeleton#debug = v:true
function! s:skkeleton_init() abort
  call skkeleton#config({
        \ 'globalJisyo': expand('~/.local/share/skk/SKK-JISYO.my'),
        \ 'globalJisyoEncoding': 'utf-8',
        \ 'eggLikeNewline': v:true,
        \ 'registerConvertResult': v:true,
        \ 'markerHenkan': '<>',
        \ 'markerHenkanSelect': '>>',
        \ })

  call skkeleton#register_kanatable('rom', {
        \ 'jj': 'escape',
        \ '~': ['ã€œ', ''],
        \ "z\<Space>": ["\u3000", ''],
        \ })
endfunction
'''
