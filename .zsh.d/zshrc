# based on http://www.clear-code.com/blog/2011/9/5.html
bindkey -e

setopt auto_menu auto_cd correct auto_name_dirs auto_remove_slash
setopt extended_history hist_ignore_dups hist_ignore_space
setopt inc_append_history
setopt hist_ignore_all_dups
setopt noflowcontrol NO_BG_NICE
setopt pushd_ignore_dups rm_star_silent sun_keyboard_hack
setopt list_types always_last_prompt
setopt cdable_vars sh_word_split auto_param_keys
setopt APPEND_HISTORY AUTO_LIST BANG_HIST auto_pushd NO_LIST_BEEP no_hup no_check_jobs
setopt ignoreeof
setopt print_eight_bit
setopt long_list_jobs 
setopt NO_CLOBBER
setopt rc_quotes
setopt prompt_subst prompt_percent transient_rprompt
cdpath=(~)
function chpwd_print() {
if [ x"$DISPLAY" != x"" ]
then print -Pn "\e]2; [%m] : %~\a"
fi
}
#chpwd_print
#function chpwd { chpwd_print }
typeset -ga chpwd_functions
chpwd_print
chpwd_functions+=dirs
chpwd_functions+=chpwd_print

HISTSIZE=10000000
SAVEHIST=$HISTSIZE
HISTFILE="$HOME/.zhistory"

function history-all { history -E 1 }


if type ruby > /dev/null 2>&1; then
        _cache_hosts=(`ruby -ne 'if /^Host\s+(.+)$/; print $1.strip, "\n"; end' ~/.ssh/config`)
fi


fpath=($HOME/.zsh.d/packages/zsh-completions/src $fpath)
autoload -U compinit
compinit
zstyle ':completion:*' format '%B%d%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:default' menu select=1
zstyle ':completion:*:default' list-colors ""
#zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z} r:|[._-]=*'
zstyle ':completion:*' completer \
        _oldlist _complete _match _history _ignored _approximate _prefix
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' verbose yes
zstyle ':completion:sudo:*' environ PATH="$SUDO_PATH:$PATH"
setopt complete_in_word
#setopt glob_complete
setopt hist_expand
setopt no_beep
setopt numeric_glob_sort
setopt magic_equal_subst
setopt extended_glob
#setopt mark_dirs

REPORTTIME=3

#watch="all"
#log

WORDCHARS=${WORDCHARS:s,/,,}

alias -g L="|& $PAGER"
alias -g G='| grep -a'
alias -g H='| head'
alias -g T='| tail'
alias -g S='| sed'
alias -g W='| wc'
alias ls='ls -F --color=auto'
alias gd='dirs -v; echo -n "select number: "; read newdir; cd +"$newdir"'
alias env_EUC='env LANG=ja_JP.eucJP LC_ALL=ja_JP.eucJP'
alias env_UTF-8='env LANG=ja_JP.UTF-8 LC_ALL=ja_JP.UTF-8'
alias env_SJIS='env LANG=ja_JP.SJIS LC_ALL=ja_JP.SJIS'

export RSYNC_RSH=ssh
export SUDO_PROMPT="sudo_password: "

bindkey '^R' history-incremental-pattern-search-backward
bindkey '^S' history-incremental-pattern-search-forward

# http://qiita.com/mollifier/items/8d5a627d773758dd8078
autoload -Uz add-zsh-hook
autoload -Uz colors
colors
autoload -Uz vcs_info
autoload -Uz is-at-least

zstyle ':vcs_info:*' max-exports 3

zstyle ':vcs_info:*' enable git svn hg bzr
zstyle ':vcs_info:*' formats '(%s)-[%b]'
zstyle ':vcs_info:*' actionformats '(%s)-[%b]' '%m' '<!%a>'
zstyle ':vcs_info:(svn|bzr):*' branchformat '%b:r%r'
zstyle ':vcs_info:bzr:*' use-simple true

autoload -Uz is-at-least
if is-at-least 4.3.10; then
        zstyle ':vcs_info:git:*' formats '(%s)-[%b]' '%c%u %m'
        zstyle ':vcs_info:git:*' actionformats '(%s)-[%b]' '%c%u %m' '<!%a>'
        zstyle ':vcs_info:git:*' check-for-changes true
        zstyle ':vcs_info:git:*' stagedstr "+"    # ÈÅ©ÂΩì„Å™ÊñáÂ≠óÂàó„Å´Â§âÊõ¥„Åô„Çã
        zstyle ':vcs_info:git:*' unstagedstr "-"  # ÈÅ©ÂΩì„ÅÆÊñáÂ≠óÂàó„Å´Â§âÊõ¥„Åô„Çã
fi
# hooks Ë®≠ÂÆö
if is-at-least 4.3.11; then
        # git „ÅÆ„Å®„Åç„ÅØ„Éï„ÉÉ„ÇØÈñ¢Êï∞„ÇíË®≠ÂÆö„Åô„Çã

        # formats '(%s)-[%b]' '%c%u %m' , actionformats '(%s)-[%b]' '%c%u %m' '<!%a>'
        # „ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË®≠ÂÆö„Åô„ÇãÁõ¥Ââç„ÅÆ„Éï„ÉÉ„ÇØÈñ¢Êï∞
        # ‰ªäÂõû„ÅÆË®≠ÂÆö„ÅÆÂ†¥Âêà„ÅØformat „ÅÆÊôÇ„ÅØ2„Å§, actionformats „ÅÆÊôÇ„ÅØ3„Å§„É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„Çã„ÅÆ„Åß
        # ÂêÑÈñ¢Êï∞„ÅåÊúÄÂ§ß3ÂõûÂëº„Å≥Âá∫„Åï„Çå„Çã„ÄÇ
        zstyle ':vcs_info:git+set-message:*' hooks \
                git-hook-begin \
                git-untracked \
                git-push-status \
                git-nomerge-branch \
                git-stash-count

        # „Éï„ÉÉ„ÇØ„ÅÆÊúÄÂàù„ÅÆÈñ¢Êï∞
        # git „ÅÆ‰ΩúÊ•≠„Ç≥„Éî„Éº„ÅÆ„ÅÇ„Çã„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„Åø„Éï„ÉÉ„ÇØÈñ¢Êï∞„ÇíÂëº„Å≥Âá∫„Åô„Çà„ÅÜ„Å´„Åô„Çã
        # (.git „Éá„Ç£„É¨„ÇØ„Éà„É™ÂÜÖ„Å´„ÅÑ„Çã„Å®„Åç„ÅØÂëº„Å≥Âá∫„Åï„Å™„ÅÑ)
        # .git „Éá„Ç£„É¨„ÇØ„Éà„É™ÂÜÖ„Åß„ÅØ git status --porcelain „Å™„Å©„Åå„Ç®„É©„Éº„Å´„Å™„Çã„Åü„ÇÅ
        function +vi-git-hook-begin() {
        if [[ $(command git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
                # 0‰ª•Â§ñ„ÇíËøî„Åô„Å®„Åù„Çå‰ª•Èôç„ÅÆ„Éï„ÉÉ„ÇØÈñ¢Êï∞„ÅØÂëº„Å≥Âá∫„Åï„Çå„Å™„ÅÑ
                return 1
        fi

        return 0
}

# untracked „Éï„Ç£„Ç¢„É´Ë°®Á§∫
#
# untracked „Éï„Ç°„Ç§„É´(„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Éï„Ç°„Ç§„É´)„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ
# unstaged (%u) „Å´ ? „ÇíË°®Á§∫
function +vi-git-untracked() {
# zstyle formats, actionformats „ÅÆ2Áï™ÁõÆ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„ÅøÂØæË±°„Å´„Åô„Çã
if [[ "$1" != "1" ]]; then
        return 0
fi

if command git status --porcelain 2> /dev/null \
        | awk '{print $1}' \
        | command grep -F '??' > /dev/null 2>&1 ; then

# unstaged (%u) „Å´ËøΩÂä†
hook_com[unstaged]+='?'
        fi
}

# push „Åó„Å¶„ÅÑ„Å™„ÅÑ„Ç≥„Éü„ÉÉ„Éà„ÅÆ‰ª∂Êï∞Ë°®Á§∫
#
# „É™„É¢„Éº„Éà„É™„Éù„Ç∏„Éà„É™„Å´ push „Åó„Å¶„ÅÑ„Å™„ÅÑ„Ç≥„Éü„ÉÉ„Éà„ÅÆ‰ª∂Êï∞„Çí
# pN „Å®„ÅÑ„ÅÜÂΩ¢Âºè„Åß misc (%m) „Å´Ë°®Á§∫„Åô„Çã
function +vi-git-push-status() {
# zstyle formats, actionformats „ÅÆ2Áï™ÁõÆ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„ÅøÂØæË±°„Å´„Åô„Çã
if [[ "$1" != "1" ]]; then
        return 0
fi

if [[ "${hook_com[branch]}" != "master" ]]; then
        # master „Éñ„É©„É≥„ÉÅ„Åß„Å™„ÅÑÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
        return 0
fi

# push „Åó„Å¶„ÅÑ„Å™„ÅÑ„Ç≥„Éü„ÉÉ„ÉàÊï∞„ÇíÂèñÂæó„Åô„Çã
local ahead
ahead=$(command git rev-list origin/master..master 2>/dev/null \
        | wc -l \
        | tr -d ' ')

if [[ "$ahead" -gt 0 ]]; then
        # misc (%m) „Å´ËøΩÂä†
        hook_com[misc]+="(p${ahead})"
fi
    }

    # „Éû„Éº„Ç∏„Åó„Å¶„ÅÑ„Å™„ÅÑ‰ª∂Êï∞Ë°®Á§∫
    #
    # master ‰ª•Â§ñ„ÅÆ„Éñ„É©„É≥„ÉÅ„Å´„ÅÑ„ÇãÂ†¥Âêà„Å´„ÄÅ
    # ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ‰∏ä„Åß„Åæ„Å† master „Å´„Éû„Éº„Ç∏„Åó„Å¶„ÅÑ„Å™„ÅÑ„Ç≥„Éü„ÉÉ„Éà„ÅÆ‰ª∂Êï∞„Çí
    # (mN) „Å®„ÅÑ„ÅÜÂΩ¢Âºè„Åß misc (%m) „Å´Ë°®Á§∫
    function +vi-git-nomerge-branch() {
    # zstyle formats, actionformats „ÅÆ2Áï™ÁõÆ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„ÅøÂØæË±°„Å´„Åô„Çã
    if [[ "$1" != "1" ]]; then
            return 0
    fi

    if [[ "${hook_com[branch]}" == "master" ]]; then
            # master „Éñ„É©„É≥„ÉÅ„ÅÆÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
            return 0
    fi

    local nomerged
    nomerged=$(command git rev-list master..${hook_com[branch]} 2>/dev/null | wc -l | tr -d ' ')

    if [[ "$nomerged" -gt 0 ]] ; then
            # misc (%m) „Å´ËøΩÂä†
            hook_com[misc]+="(m${nomerged})"
    fi
    }


    # stash ‰ª∂Êï∞Ë°®Á§∫
    #
    # stash „Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ :SN „Å®„ÅÑ„ÅÜÂΩ¢Âºè„Åß misc (%m) „Å´Ë°®Á§∫
    function +vi-git-stash-count() {
    # zstyle formats, actionformats „ÅÆ2Áï™ÁõÆ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„ÅøÂØæË±°„Å´„Åô„Çã
    if [[ "$1" != "1" ]]; then
            return 0
    fi

    local stash
    stash=$(command git stash list 2>/dev/null | wc -l | tr -d ' ')
    if [[ "${stash}" -gt 0 ]]; then
            # misc (%m) „Å´ËøΩÂä†
            hook_com[misc]+=":S${stash}"
    fi
    }

fi

function _update_vcs_info_msg() {
local -a messages
local prompt

LANG=en_US.UTF-8 vcs_info

if [[ -z ${vcs_info_msg_0_} ]]; then
        # vcs_info „Åß‰Ωï„ÇÇÂèñÂæó„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„Éó„É≠„É≥„Éó„Éà„ÇíË°®Á§∫„Åó„Å™„ÅÑ
        prompt=""
else
        # vcs_info „ÅßÊÉÖÂ†±„ÇíÂèñÂæó„Åó„ÅüÂ†¥Âêà
        # $vcs_info_msg_0_ , $vcs_info_msg_1_ , $vcs_info_msg_2_ „Çí
        # „Åù„Çå„Åû„ÇåÁ∑ë„ÄÅÈªÑËâ≤„ÄÅËµ§„ÅßË°®Á§∫„Åô„Çã
        [[ -n "$vcs_info_msg_0_" ]] && messages+=( "%F{green}${vcs_info_msg_0_}%f" )
        [[ -n "$vcs_info_msg_1_" ]] && messages+=( "%F{yellow}${vcs_info_msg_1_}%f" )
        [[ -n "$vcs_info_msg_2_" ]] && messages+=( "%F{red}${vcs_info_msg_2_}%f" )

        # Èñì„Å´„Çπ„Éö„Éº„Çπ„ÇíÂÖ•„Çå„Å¶ÈÄ£Áµê„Åô„Çã
        prompt="${(j: :)messages}"
fi

RPROMPT="$prompt"
}

# function _git_not_pushed() {
# if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
#         head="$(git rev-parse HEAD)"
#         for x in $(git rev-parse --remotes)
#         do
#                 if [ "$head" = "$x" ]; then
#                         return 0
#                 fi
#         done
#         echo "?"
# fi
# return 0
# }

add-zsh-hook precmd _update_vcs_info_msg
RPROMPT="%1(v|%F{green}%1v%2v%f|)"
PROMPT='%{[$[32+$RANDOM % 5]m%}%n@%m:%~%%%{[m%}%u '

function rfc(){ command wget -q -O- http://www.ietf.org/rfc/rfc$1.txt | lv }

autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

if [ -f $HOME/.zsh.d/packages/z/z.sh ]; then
        . $HOME/.zsh.d/packages/z/z.sh
        function precmd () {
        _z --add "$(pwd -P)"
}
fi
